<?php
/**
 * Created by PhpStorm.
 * User: bert
 * Date: 25/11/18
 * Time: 10:43
 */

use React\EventLoop\Factory;
use Rx\Observable;
use Rx\Scheduler;
use Rx\Subject\Subject;

require_once __DIR__ . '/vendor/autoload.php';

$loop = Factory::create();

try {
    Scheduler::setDefaultFactory(function () use ($loop) {
        return new Scheduler\EventLoopScheduler($loop);
    });
} catch (Exception $e) {
    echo $e->getMessage();
}

// Generator, reads CSV file.
function users($file)
{
    $users = fopen($file, 'rb');
    while (!feof($users)) {
        yield fgetcsv($users)[0];
    }
    fclose($users);
}

// Setting Observers this way limits them to one, if you install a second one using CallbackObserver
// the first one consumes the stream leaving nothing for the second one.
/*$logger = new CallbackObserver(
    function ($user) {
        echo $user . PHP_EOL;
    },
    function (\Throwable $t){
        echo $t->getMessage() . PHP_EOL;
    },
    function () {
        echo 'Stream complete!' . PHP_EOL;
    }
);*/

// Using Subject class this can be solved
$logger = new class() extends Subject
{
    public function onCompleted()
    {
        echo 'logger.onCompleted' . PHP_EOL;
        return parent::onCompleted(); // TODO: Change the autogenerated stub
    }

    public function onError(\Throwable $exception)
    {
        echo 'logger.onError' . $exception->getMessage() . PHP_EOL;
        return parent::onError($exception); // TODO: Change the autogenerated stub
    }

    public function onNext($value)
    {
        echo 'logger.onNext : ' . $value . PHP_EOL;
        return parent::onNext($value); // TODO: Change the autogenerated stub
    }

};

$mailer = new class() extends Subject
{
    public function onCompleted()
    {
        echo 'mailer.onCompleted' . PHP_EOL;
        return parent::onCompleted(); // TODO: Change the autogenerated stub
    }

    public function onError(\Throwable $exception)
    {
        echo 'mailer.onError' . $exception->getMessage() . PHP_EOL;
        return parent::onError($exception); // TODO: Change the autogenerated stub
    }

    public function onNext($value)
    {
        echo 'mailer.onNext : ' . $value .  PHP_EOL;
        return parent::onNext($value); // TODO: Change the autogenerated stub
    }

};



// Dummy map callback function
$mapper = function ($value) {
    return time() . ' | ' . $value;
};

// Dummy filter callback function
$filter = function ($value) {
    return strstr($value, 'Ma');
};

// Start generator
$users = users(__DIR__ . '/users.csv');

// The Observable from RxPHP
$users = Observable::fromIterator($users);
    //->map($mapper)
    //->filter($filter);

$mailer->subscribe($logger);
$users->subscribe($mailer);

$loop->run();